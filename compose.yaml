services:
  nginx:
    image: nginx:1.27.5
    container_name: nginx
    ports:
      - "8082:8082"
      # - "8081:8081"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certs:/certs:ro
      - ./nginx/logs:/var/log/nginx
      - ./nginx/auth:/nginx/auth
    networks:
      - openobserve
    depends_on:
      - openobserve
      - rabbitmq
      - grafana
      - victoriametrics
      - vector-aggregator
  openobserve:
    image: openobserve/openobserve:v0.14.7
    container_name: openobserve
    expose:
      - 5080
    # ports:
    #   - "5080:5080"
    #   - "5081:5081"
    # volumes:
    #   - ${PWD}/data:/data
    env_file:
      - ./.env
    networks:
      - openobserve
  vector-aggregator:
    image: timberio/vector:0.46.1-debian
    # container_name: vector-aggregator
    deploy:
      mode: replicated
      replicas: 2
    # ports:
    #   - "8687:8687"
    env_file:
      - ./config/vector.env
    volumes:
      - ./config:/etc/vector
    networks:
      - openobserve
    # network_mode: host
    expose:
      - 6000
      - 6001
    depends_on:
      - openobserve
      - otel-collector
    command: ["--config", "/etc/vector/vector_aggregator.yaml"]
  vector:
    user: "0"
    image: timberio/vector:0.46.1-debian
    container_name: vector
    ports:
      - "8686:8686"
    env_file:
      - ./config/vector.env
    volumes:
      - ./config:/etc/vector
      - /var/run/docker.sock:/var/run/docker.sock
      # enable scraping of host metrics
      # - /proc:/host/proc:ro
      # - /sys:/host/sys:ro
      # - /:/rootfs:ro
      - /var/log/journal:/var/log/journal:ro # Mount the journal directory
      - /run/log/journal:/run/log/journal:ro # Mount the runtime journal directory
      - /etc/machine-id:/etc/machine-id:ro # Mount the machine-id file
      # - /usr/bin/journalctl:/usr/bin/journalctl:ro # Mount the journalctl binary
    networks:
      - openobserve
    # network_mode: host
    depends_on:
      - nginx
      # - openobserve
      # - rabbitmq
      # - victoriametrics
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.123.0
    container_name: otel-collector
    command: ["--config=/conf/otel-config.yaml"] # <1>
    volumes:
      - ./config:/conf # <2>
      - ./certs:/certs
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
    privileged: true
    env_file:
      - ./.otel-collector.env
    ports:
      # - "55679:55679"
      - "4317:4317"   # <3> OLTP receiver
      - "8888:8888"   # <4> metrics self-telemetry
    # - "9292:9292"   # <5> metrics Prometheus
      - "13133"       # <6> health check
      - "55679:55679" # <7> zPages
      - "1777:1777"   # <8> pprof
    networks:
      - openobserve
    user: "0"
    depends_on:
      - openobserve
      - mongodb
      # - redis
  rabbitmq:
    image: rabbitmq:4.1.0-management
    container_name: rabbitmq
    hostname: "rabbit-broker"
    ports:
        - 5672:5672
        # - 15672:15672
        # metrics
        - 15692:15692
    environment:
      - RABBITMQ_NODENAME=rabbit-broker
      - RABBITMQ_DEFAULT_USER=rabbit
      - RABBITMQ_DEFAULT_PASS=${RABBIT_BROKER_PASSWORD?err}
      - RABBITMQ_DEFAULT_VHOST=rabbit_host
      - RABBITMQ_CONFIG_FILE=/rabbitmq/config/rabbitmq.conf
    volumes:
      - ./config:/rabbitmq/config
    networks:
      - openobserve
  valkey:
    image: valkey/valkey:8.1.1
    container_name: valkey
    ports:
      - "6379:6379"
    networks:
      - openobserve
  mongodb:
    image: mongo:8.0.9
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - openobserve
  victoriametrics:
    image: victoriametrics/victoria-metrics:v1.117.1
    container_name: victoriametrics
    networks:
      - openobserve
    # ports:
    #   - 8428:8428
    # volumes:
    #   - ./victoriametrics:/etc/prometheus
    command:
      - -retentionPeriod=14d
      # see https://docs.victoriametrics.com/victoriametrics/single-server-victoriametrics/#track-ingested-metrics-usage
      - --storage.trackMetricNamesStats
      # - '-promscrape.config=/etc/prometheus/prometheus.yml'
  # percona-mongo-exporter:
  #   image: percona/mongodb_exporter:0.40.0
  #   container_name: percona-mongo-exporter
  #   networks:
  #     - openobserve
  #   command:
  #     - --collect-all
  #     - --collector.profile-time-ts
  #     # This interval must be synchronized with the Prometheus scrape interval
  #     - "30"
  #   ports:
  #     - 9216:9216
  #   #   - 17001:17001
  #   environment:
  #     - MONGODB_URI=mongodb://mongodb:27017/admin?ssl=false
  grafana:
    # https://hub.docker.com/r/grafana/grafana/tags
    image: grafana/grafana:12.0.0
    container_name: "grafana"
    expose:
      - 3000
    # ports:
    #   - "3000:3000"
    networks:
      - openobserve
    volumes:
      - ./grafana:/etc/grafana/provisioning
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini
      # mount plugins to the Grafana container
      # - ./grafana/plugins:/var/lib/grafana/plugins
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD?err}
      GF_SECURITY_ADMIN_USER: "roma"
    env_file:
      - ./grafana/grafana.env
  node-exporter:
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    # https://hub.docker.com/r/prom/node-exporter/tags
    # ports:
    #   - 9100:9100
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    networks:
      - openobserve
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
  mongo-stress:
    image: mongodb-poc-driver:0.1.0
    container_name: mongo-stress
    profiles:
      - mongo-stress
    depends_on:
      - mongodb
    networks:
      - openobserve
    command:
      - --host
      - mongodb://mongodb:27017
      - -k
      - "20"
      - -i
      - "10"
      - -u
      - "10"
      - -b
      - "20"
networks:
  openobserve:
    driver: bridge
