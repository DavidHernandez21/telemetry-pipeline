---
receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # prometheus:
  #   config:
  #     scrape_configs:
  #       - job_name: otel-collector
  #         scrape_interval: 30s
  #         static_configs:
  #           - targets: [0.0.0.0:8888]

  mongodb:
    hosts:
      - endpoint: mongodb:27017
    collection_interval: 15s
    replica_set: ""
    tls:
      insecure: true
      insecure_skip_verify: true

  redis:
    endpoint: "valkey:6379"
    collection_interval: 15s



  docker_stats:
    api_version: "1.49"
    # docker sock is exposed on tcp port 2375
    # https://docs.docker.com/config/daemon/remote-access/
    # edit this file FragmentPath=/lib/systemd/system/docker.service
    # endpoint: "tcp://127.0.0.1:2375"
  # rabbitmq:
  #   endpoint: http://127.0.0.1:15672
  #   username: monitoring
  #   password: ${env:RABBITMQ_PASSWORD}
    collection_interval: 30s
    metrics:
      container.cpu.usage.percpu:
        enabled: true
  #   tls:
  #     # enabled: false
  #     insecure_skip_verify: true
  hostmetrics:
    root_path: /hostfs
    collection_interval: 30s
    scrapers:
      cpu:
      load:
      memory:
      filesystem:
      network:
      disk:
      paging:
      # process:
      #   mute_process_exe_error: true
      # processes:


processors:
  batch:

  resourcedetection/docker:
    detectors: [env, docker]
    timeout: 2s
    override: true

exporters:
  debug:
    verbosity: detailed

  prometheusremotewrite:
    endpoint: http://openobserve:5080/openobserve/api/dajetutta/prometheus/api/v1/write
    resource_to_telemetry_conversion:
      enabled: true
    tls:
      insecure: true
      insecure_skip_verify: true
    auth:
      authenticator: basicauth/client

  prometheus:
    endpoint: "0.0.0.0:9999"
    resource_to_telemetry_conversion:
      enabled: true
    enable_open_metrics: true




extensions:
  health_check:
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679

  basicauth/client:
    client_auth:
      username: root@example.com
      password: ${env:ZO_ROOT_USER_PASSWORD}



service:
  telemetry: # <1>
    logs:
      level: debug
    metrics:
      # level: detailed
      readers:
        - pull:
            exporter:
              prometheus:
                host: '0.0.0.0'
                port: 8888

  pipelines: # <2>
    metrics: # <3>
      # receivers: [mongodb, hostmetrics, docker_stats, prometheus]
      # docker_stats and hostmetrics do not work well in wsl2
      receivers: [mongodb, redis]
      processors: [batch, resourcedetection/docker]
      exporters: [prometheusremotewrite]
    # traces: # <4>
    #   receivers: [otlp]
    #   processors: [batch]
    #   exporters: [logging, jaeger]
  extensions: [health_check, pprof, zpages, basicauth/client]
